AWSTemplateFormatVersion: '2010-09-09'
Description: 'Spinscribe - Complete Infrastructure (All-in-One Template)'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Environment name

  DatabasePassword:
    Type: String
    NoEcho: true
    MinLength: 16
    Description: PostgreSQL master password (min 16 chars)

  CrewAIApiKey:
    Type: String
    NoEcho: true
    Description: Your CrewAI API key

  SerperApiKey:
    Type: String
    NoEcho: true
    Description: Your Serper API key for web research
  
  CrewAIApiUrl:
    Type: String
    Description: Your deployed CrewAI API URL
    Default: https://api.crewai.com/v1

  CrewAIUserBearerToken:
    Type: String
    NoEcho: true
    Description: Your CrewAI User Bearer Token

  OpenAIApiKey:
    Type: String
    NoEcho: true
    Description: Your OpenAI API key

Conditions:
  IsProduction: !Equals [!Ref Environment, 'production']

Resources:
  # =============================================================================
  # VPC & NETWORKING
  # =============================================================================
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub 'spinscribe-${Environment}-vpc'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub 'spinscribe-${Environment}-igw'

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'spinscribe-${Environment}-public-1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'spinscribe-${Environment}-public-2'

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.11.0/24
      Tags:
        - Key: Name
          Value: !Sub 'spinscribe-${Environment}-private-1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.12.0/24
      Tags:
        - Key: Name
          Value: !Sub 'spinscribe-${Environment}-private-2'

  # NAT Gateways
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'spinscribe-${Environment}-public-rt'

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'spinscribe-${Environment}-private-rt-1'

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet2

  # =============================================================================
  # SECURITY GROUPS
  # =============================================================================
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'spinscribe-${Environment}-alb-sg'
      GroupDescription: ALB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'spinscribe-${Environment}-ecs-sg'
      GroupDescription: ECS Tasks Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'spinscribe-${Environment}-db-sg'
      GroupDescription: Database Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ECSSecurityGroup

  CacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'spinscribe-${Environment}-cache-sg'
      GroupDescription: Redis Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref ECSSecurityGroup

  # =============================================================================
  # S3 BUCKETS
  # =============================================================================
  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'spinscribe-${Environment}-documents-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: MoveToIntelligentTiering
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: INTELLIGENT_TIERING
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedHeaders: ['*']
            MaxAge: 3600

  OutputsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'spinscribe-${Environment}-outputs-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # =============================================================================
  # RDS POSTGRESQL
  # =============================================================================
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub 'spinscribe-${Environment}-db-subnet'
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub 'spinscribe-${Environment}-db'
      DBInstanceClass: !If [IsProduction, 'db.t4g.medium', 'db.t4g.micro']
      Engine: postgres
      EngineVersion: '15.14'
      MasterUsername: spinscribe_admin
      MasterUserPassword: !Ref DatabasePassword
      AllocatedStorage: !If [IsProduction, 100, 20]
      StorageType: gp3
      StorageEncrypted: true
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      BackupRetentionPeriod: !If [IsProduction, 30, 7]
      MultiAZ: !If [IsProduction, true, false]
      PubliclyAccessible: false
      DeletionProtection: !If [IsProduction, true, false]

  # =============================================================================
  # ELASTICACHE REDIS
  # =============================================================================
  CacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      CacheSubnetGroupName: !Sub 'spinscribe-${Environment}-cache-subnet'
      Description: Subnet group for Redis
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  CacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: !If [IsProduction, 'cache.t4g.medium', 'cache.t4g.micro']
      Engine: redis
      NumCacheNodes: 1
      CacheSubnetGroupName: !Ref CacheSubnetGroup
      VpcSecurityGroupIds:
        - !Ref CacheSecurityGroup

  # =============================================================================
  # SECRETS MANAGER
  # =============================================================================
  AppSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'spinscribe/${Environment}/secrets'
      Description: All application secrets for Spinscribe
      SecretString: !Sub |
        {
          "database_host": "${DBInstance.Endpoint.Address}",
          "database_port": "5432",
          "database_name": "postgres",
          "database_user": "spinscribe_admin",
          "database_password": "${DatabasePassword}",
          "database_url": "postgresql://spinscribe_admin:${DatabasePassword}@${DBInstance.Endpoint.Address}:5432/postgres",
          "redis_host": "${CacheCluster.RedisEndpoint.Address}",
          "redis_port": "6379",
          "redis_url": "redis://${CacheCluster.RedisEndpoint.Address}:6379/0",
          "crewai_api_url": "${CrewAIApiUrl}",
          "crewai_bearer_token": "${CrewAIApiKey}",
          "crewai_user_bearer_token": "${CrewAIUserBearerToken}",
          "crewai_base_url": "${CrewAIApiUrl}",
          "openai_api_key": "${OpenAIApiKey}",
          "serper_api_key": "${SerperApiKey}",
          "documents_bucket": "${DocumentsBucket}",
          "outputs_bucket": "${OutputsBucket}",
          "aws_region": "${AWS::Region}",
          "environment": "${Environment}",
          "model": "gpt-4o",
          "openai_model_name": "gpt-4o",
          "openai_temperature": "0.7",
          "log_level": "INFO",
          "enable_web_research": "true",
          "default_content_min_length": "1000",
          "supported_content_types": "blog,landing_page,local_article",
          "enable_hitl_brand_voice_review": "true",
          "enable_hitl_style_compliance_review": "true",
          "enable_hitl_final_approval": "true",
          "jwt_secret": "${JWTSecret}",
          "webhook_token": "${WebhookToken}"
        }

  # Generate JWT secret
  JWTSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        PasswordLength: 64
        ExcludePunctuation: true

  # Generate webhook token
  WebhookToken:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        PasswordLength: 64
        ExcludePunctuation: true

  # =============================================================================
  # COGNITO USER POOL
  # =============================================================================
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub 'spinscribe-${Environment}-users'
      UsernameAttributes: [email]
      AutoVerifiedAttributes: [email]
      Policies:
        PasswordPolicy:
          MinimumLength: 12
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      Schema:
        - Name: email
          Required: true
          Mutable: false
        - Name: name
          Required: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub 'spinscribe-${Environment}-client'
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  # =============================================================================
  # APPLICATION LOAD BALANCER
  # =============================================================================
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub 'spinscribe-${Environment}-alb'
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub 'spinscribe-${Environment}-tg'
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  # =============================================================================
  # ECS CLUSTER
  # =============================================================================
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub 'spinscribe-${Environment}-cluster'
      CapacityProviders:
        - FARGATE
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  # CloudWatch Logs
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/spinscribe/${Environment}'
      RetentionInDays: !If [IsProduction, 30, 7]

  # IAM Roles
  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Policies:
        - PolicyName: SecretsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'secretsmanager:GetSecretValue'
                Resource: !Ref AppSecrets

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 's3:ListBucket'
                Resource:
                  - !GetAtt DocumentsBucket.Arn
                  - !Sub '${DocumentsBucket.Arn}/*'
                  - !GetAtt OutputsBucket.Arn
                  - !Sub '${OutputsBucket.Arn}/*'
        - PolicyName: SecretsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'secretsmanager:GetSecretValue'
                Resource: !Ref AppSecrets

  # Task Definition (placeholder - you'll update with actual image)
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub 'spinscribe-${Environment}-api'
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      Cpu: !If [IsProduction, '1024', '512']
      Memory: !If [IsProduction, '2048', '1024']
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: api
          Image: 748257756264.dkr.ecr.us-east-1.amazonaws.com/spinscribe-api:latest
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: api
          Secrets:
            - Name: DATABASE_URL
              ValueFrom: !Sub '${AppSecrets}:database_url::'
            - Name: REDIS_URL
              ValueFrom: !Sub '${AppSecrets}:redis_url::'
            - Name: CREWAI_API_URL
              ValueFrom: !Sub '${AppSecrets}:crewai_api_url::'
            - Name: CREWAI_BEARER_TOKEN
              ValueFrom: !Sub '${AppSecrets}:crewai_bearer_token::'
            - Name: CREWAI_USER_BEARER_TOKEN
              ValueFrom: !Sub '${AppSecrets}:crewai_user_bearer_token::'
            - Name: OPENAI_API_KEY
              ValueFrom: !Sub '${AppSecrets}:openai_api_key::'
            - Name: SERPER_API_KEY
              ValueFrom: !Sub '${AppSecrets}:serper_api_key::'
            - Name: DOCUMENTS_BUCKET
              ValueFrom: !Sub '${AppSecrets}:documents_bucket::'
            - Name: OUTPUTS_BUCKET
              ValueFrom: !Sub '${AppSecrets}:outputs_bucket::'
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: AWS_REGION
              Value: !Ref AWS::Region

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub 'spinscribe-${Environment}-api'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: !If [IsProduction, 2, 1]
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - ContainerName: api
          ContainerPort: 8000
          TargetGroupArn: !Ref ALBTargetGroup

Outputs:
  LoadBalancerURL:
    Description: URL of the load balancer
    Value: !Sub 'http://${ALB.DNSName}'
    Export:
      Name: !Sub 'spinscribe-${Environment}-url'

  DatabaseEndpoint:
    Description: PostgreSQL endpoint
    Value: !GetAtt DBInstance.Endpoint.Address

  RedisEndpoint:
    Description: Redis endpoint
    Value: !GetAtt CacheCluster.RedisEndpoint.Address

  DocumentsBucket:
    Description: S3 bucket for documents
    Value: !Ref DocumentsBucket

  OutputsBucket:
    Description: S3 bucket for outputs
    Value: !Ref OutputsBucket

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  UserPoolClientId:
    Description: Cognito Client ID
    Value: !Ref UserPoolClient

  SecretsArn:
    Description: Secrets Manager ARN
    Value: !Ref AppSecrets

  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster